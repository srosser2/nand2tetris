// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Mux16 select A-Register (addressM) or inM
    // sel: (a bit) if 0 set A-Register to outALU, if 1 inM
    Mux16(
        a=instruction,
        b=inM,
        sel=instruction[0],
        out[0..15]=outMux16Mem
    );

//    ALU(
//        x[16]=outDReg,
//        y[16]=outMux16Mem,
//        zx=instruction[4],
//        nx=instruction[5],
//        zy=instruction[6],
//        ny=instruction[7],
//        f=instruction[8],
//        no=instruction[9],
//        out[16]=outM,
//        zr=outZr,
//        ng=outNg
//    );

    // D Register
//    Register(
//        in[16]=outM,
//        load=instruction[12],
//        out[16]=outDReg
//    );

    // Mux16 select outM or instruction
    // sel: is it an A instructin or C instruction?
//    Mux16(
//        a[16]=outM,
//        b[16]=instruction[0..15],
//        sel=instruction[3],
//        out[16]=outMux16I
//    )

    // A Register
//    Register(
//        in[16]=outMux16I,
//        load=instruction[11],
//        out[16]=addressM
//    );

    // PC
//    PC(
//        in[16]=addressM,
//        load=...,
//        inc=...,
//        reset=reset,
//        out[16]=...
//    );

}
